---
import animeConfig from "@configs/animeConfig";
import SearchIcon from "./icons/SearchIcon.astro";
import MoonIcon from "./icons/MoonIcon.astro";
import SunIcon from "./icons/SunIcon.astro";



interface Props {
  navLinks: {
    title: string;
    href: string;
    icon: any;
  }[];
}

const {
  bellonime: { siteName, logo },
} = animeConfig;
const { navLinks } = Astro.props;
let activeLink = Astro.url.pathname;
---

<nav
  id="navbar"
  class="fixed w-full z-50 top-0 flex justify-between items-center px-4 py-2 space-x-4"
>
  <!-- Bagian Kiri -->
  <div
    class="rounded-full bg-zinc-100 dark:bg-zinc-800 p-2 shadow-md flex items-center space-x-2 rtl:space-x-reverse"
  >
    <a href={Astro.url.origin} class="flex items-center space-x-2 rtl:space-x-reverse">
      <img src={logo} class="w-6" />
      <h1 class="text-lg font-semibold whitespace-nowrap dark:text-white hidden sm:block">
        {siteName}
      </h1>
    </a>
  </div>

  <!-- Bagian Tengah -->
  <div
    class="rounded-full bg-zinc-100 dark:bg-zinc-800 p-2 shadow-md flex justify-center"
  >
    <ul class="flex space-x-2 rtl:space-x-reverse">
      {navLinks.map((link) => {
        const isActive = link.href === activeLink;
        return (
          <li>
            <a
            
              href={link.href}
              class={`navbar-link-item ${isActive ? 'active' : ''} ${isActive ? 'transitioning' : ''}`}
            >
              <link.icon class="w-6 h-6"/>
            </a>
          </li>
        );
      })}
    </ul>
  </div>

  <!-- Bagian Kanan -->
  <div
    class="rounded-full bg-zinc-100 dark:bg-zinc-800 p-2 shadow-md flex items-center space-x-2 rtl:space-x-reverse"
  >
    <button
      id="navbar-button-search-main"
      data-dropdown-toggle="dropdownSearch"
      data-dropdown-placement="bottom-end"
      type="button"
      class="inline-flex items-center p-1 w-8 h-8 justify-center text-sm text-zinc-700 rounded-full hover:bg-zinc-200 dark:text-zinc-200 dark:hover:bg-zinc-700"
    >
      <SearchIcon class="w-4 h-4" />
    </button>
    <div id="dropdownSearch" class="z-10 hidden w-full">
      <ul
        class="p-2 text-sm   -translate-y-2"
      >
        <form
          id="navbar-form-search"
          class="max-w-md mx-auto text-zinc-700 dark:text-zinc-200"
        >
          <div class="flex">
            <div class="relative w-full">
              <input
                type="search"
                id="navbar-input-search"
                class=" p-2 w-full z-20 text-sm  bg-zinc-50 rounded-lg border border-zinc-300 focus:ring-pink-500 focus:border-pink-500 dark:bg-zinc-800  dark:placeholder-zinc-400 dark:text-white dark:focus:border-pink-500"
                placeholder="Cari Anime.."
                required
              />
              <button
                type="submit"
                class="absolute top-0 end-0 h-full p-2 text-sm font-medium text-white bg-pink-600 rounded-e-lg border border-pink-600 hover:bg-pink-700 focus:ring-4 focus:outline-none focus:ring-pink-300 dark:bg-pink-500 dark:hover:bg-pink-600 dark:focus:ring-pink-700"
              >
                <SearchIcon class="w-4 h-4" />
              </button>
            </div>
          </div>
        </form>
      </ul>
    </div>
    <button
      id="button-theme"
      type="button"
      class="inline-flex items-center p-1 w-8 h-8 justify-center text-sm text-zinc-700 rounded-full hover:bg-zinc-200 dark:text-zinc-200 dark:hover:bg-zinc-700"
    >
      <MoonIcon id="icon-moon" class="hidden w-4 h-4" />
      <SunIcon id="icon-sun" class="text-pink-500 hidden w-4 h-4" />
    </button>
  </div>
</nav>

<script>


  // LOGIKA PENCARIAN
  const searchFormEl = document.getElementById(
    "navbar-form-search"
  ) as HTMLFormElement;
  const mainSearchButtonEl = document.getElementById(
    "navbar-button-search-main"
  );
  let timeouts: NodeJS.Timeout[] = [];

  if (mainSearchButtonEl) {
    mainSearchButtonEl.addEventListener(
      "click",
      function () {
        timeouts.forEach((timeout) => {
          clearTimeout(timeout);
        });

        timeouts = [];

        timeouts.push(
          setTimeout(() => {
            const searchInputEl = document.querySelector("input");

            searchInputEl?.focus();
          }, 100)
        );
      },
      true
    );
  }

  if (searchFormEl) {
    searchFormEl.addEventListener("submit", function (e) {
      e.preventDefault();

      const inputEl = this.querySelector("input");

      location.href = `/search?q=${inputEl?.value}`;
    });
  }
</script>